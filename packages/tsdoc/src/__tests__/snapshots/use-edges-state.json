{
  "description": "This hook makes it easy to prototype a controlled flow where you manage the
state of nodes and edges outside the `ReactFlowInstance`. You can think of it
like React's `useState` hook with an additional helper callback.",
  "filePath": "../../node_modules/.pnpm/@xyflow+react@12.6.0_@types+react@19.1.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/@xyflow/react/dist/esm/hooks/useNodesEdgesState.d.ts",
  "name": "useEdgesState",
  "signatures": [
    {
      "params": [
        {
          "name": "initialEdges",
          "type": "EdgeType[]",
        },
      ],
      "returns": {
        "type": "[edges: EdgeType[], setEdges: Dispatch<SetStateAction<EdgeType[]>>, onEdgesChange: OnEdgesChange<EdgeType>]",
      },
    },
  ],
  "tags": {
    "example": "```tsx
import { ReactFlow, useNodesState, useEdgesState } from '@xyflow/react';

const initialNodes = [];
const initialEdges = [];

export default function () {
 const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);
 const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);

 return (
   <ReactFlow
     nodes={nodes}
     edges={edges}
     onNodesChange={onNodesChange}
     onEdgesChange={onEdgesChange}
   />
 );
}
```",
    "public": "",
    "remarks": "This hook was created to make prototyping easier and our documentation
examples clearer. Although it is OK to use this hook in production, in
practice you may want to use a more sophisticated state management solution
like Zustand {@link https://reactflow.dev/docs/guides/state-management/} instead.",
    "returns": "- `edges`: The current array of edges. You might pass this directly to the `edges` prop of your
`<ReactFlow />` component, or you may want to manipulate it first to perform some layouting,
for example.

- `setEdges`: A function that you can use to update the edges. You can pass it a new array of
edges or a callback that receives the current array of edges and returns a new array of edges.
This is the same as the second element of the tuple returned by React's `useState` hook.

- `onEdgesChange`: A handy callback that can take an array of `EdgeChanges` and update the edges
state accordingly. You'll typically pass this directly to the `onEdgesChange` prop of your
`<ReactFlow />` component.",
  },
}