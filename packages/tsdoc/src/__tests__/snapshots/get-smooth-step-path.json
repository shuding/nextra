{
  "description": "The `getSmoothStepPath` util returns everything you need to render a stepped path
between two nodes. The `borderRadius` property can be used to choose how rounded
the corners of those steps are.",
  "filePath": "../../node_modules/.pnpm/@xyflow+system@0.0.57/node_modules/@xyflow/system/dist/esm/utils/edges/smoothstep-edge.d.ts",
  "name": "getSmoothStepPath",
  "signatures": [
    {
      "params": [
        {
          "description": "The `x` position of the source handle.",
          "name": "[0].sourceX",
          "type": "number",
        },
        {
          "description": "The `y` position of the source handle.",
          "name": "[0].sourceY",
          "type": "number",
        },
        {
          "description": "The position of the source handle.",
          "name": "[0].sourcePosition",
          "optional": true,
          "tags": {
            "default": "Position.Bottom",
          },
          "type": "Position",
        },
        {
          "description": "The `x` position of the target handle.",
          "name": "[0].targetX",
          "type": "number",
        },
        {
          "description": "The `y` position of the target handle.",
          "name": "[0].targetY",
          "type": "number",
        },
        {
          "description": "The position of the target handle.",
          "name": "[0].targetPosition",
          "optional": true,
          "tags": {
            "default": "Position.Top",
          },
          "type": "Position",
        },
        {
          "name": "[0].borderRadius",
          "optional": true,
          "tags": {
            "default": "5",
          },
          "type": "number",
        },
        {
          "name": "[0].centerX",
          "optional": true,
          "type": "number",
        },
        {
          "name": "[0].centerY",
          "optional": true,
          "type": "number",
        },
        {
          "name": "[0].offset",
          "optional": true,
          "tags": {
            "default": "20",
          },
          "type": "number",
        },
      ],
      "returns": {
        "type": "[path: string, labelX: number, labelY: number, offsetX: number, offsetY: number]",
      },
    },
  ],
  "tags": {
    "example": "```js
 const source = { x: 0, y: 20 };
 const target = { x: 150, y: 100 };

 const [path, labelX, labelY, offsetX, offsetY] = getSmoothStepPath({
   sourceX: source.x,
   sourceY: source.y,
   sourcePosition: Position.Right,
   targetX: target.x,
   targetY: target.y,
   targetPosition: Position.Left,
 });
```",
    "public": "",
    "remarks": "This function returns a tuple (aka a fixed-size array) to make it easier to work with multiple edge paths at once.",
    "returns": "A path string you can use in an SVG, the `labelX` and `labelY` position (center of path)
and `offsetX`, `offsetY` between source handle and label.

- `path`: the path to use in an SVG `<path>` element.
- `labelX`: the `x` position you can use to render a label for this edge.
- `labelY`: the `y` position you can use to render a label for this edge.
- `offsetX`: the absolute difference between the source `x` position and the `x` position of the
middle of this path.
- `offsetY`: the absolute difference between the source `y` position and the `y` position of the
middle of this path.",
  },
}